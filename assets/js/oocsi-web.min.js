var OOCSI = (function() {
    var e = "ws://localhost/ws";
    var g;
    var q = {};
    var b = {};
    var m = {};
    var w;
    var y = d;
    var s = t;

    function u() {
        y("CONNECTING to " + e);
        w = new WebSocket(e);
        w.onopen = function(z) {
            h(z)
        };
        w.onclose = function(z) {
            f(z)
        };
        w.onmessage = function(z) {
            v(z)
        };
        w.onerror = function(z) {
            i(z)
        }
    }

    function h(z) {
        if (w.readyState === WebSocket.OPEN) {
            l(g)
        }
        y("CONNECTED")
    }

    function f(z) {
        y("DISCONNECTED")
    }

    function v(z) {
        if (z.data !== "ping") {
            try {
                var A = JSON.parse(z.data);
                if (A.data.hasOwnProperty("_MESSAGE_ID") && m.hasOwnProperty(A.data._MESSAGE_ID)) {
                    var B = m[A.data._MESSAGE_ID];
                    if ((+new Date) < B.expiration) {
                        delete A.data._MESSAGE_ID;
                        B.fn(A.data)
                    }
                    delete m[A.data._MESSAGE_ID]
                } else {
                    if (q[A.recipient] !== undefined) {
                        q[A.recipient](A)
                    } else {
                        y("no handler for event: " + z.data)
                    }
                }
            } catch (A) {
                y("ERROR: parse exception for event data " + z.data)
            }
            y("RESPONSE: " + z.data)
        } else {
            if (z.data.length > 0) {
                w.send(".")
            }
        }
    }

    function i(z) {
        s();
        y("ERROR: " + z)
    }

    function o(z) {
        if (!w || w.readyState === WebSocket.CONNECTING) {
            setTimeout(function() {
                o(z)
            }, 200)
        } else {
            z()
        }
    }

    function l(z) {
        if (w && w.send(z)) {
            y("SENT: " + z)
        }
    }

    function p() {
        w && w.close()
    }

    function d(z) {}

    function t() {}

    function k() {
        return w.readyState === WebSocket.OPEN
    }

    function c(z, A) {
        k() && l("sendjson " + z + " " + JSON.stringify(A))
    }

    function n(B, D, C, A) {
        if (k()) {
            var z = r();
            m[z] = {
                expiration: (+new Date) + C,
                fn: A
            };
            D._MESSAGE_ID = z;
            D._MESSAGE_HANDLE = B;
            l("sendjson " + B + " " + JSON.stringify(D))
        }
    }

    function a(A, z) {
        if (k()) {
            b[A] = {
                fn: z
            };
            j(A, function(C) {
                var B = {
                    _MESSAGE_ID: C.data._MESSAGE_ID
                };
                z(C.data, B);
                c(C.sender, B)
            })
        }
    }

    function j(A, z) {
        if (k()) {
            l("subscribe " + A);
            q[A] = z
        }
    }

    function x(z) {
        if (k()) {
            l("unsubscribe " + z);
            q[z] = function() {}
        }
    }

    function r() {
        function z() {
            return Math.floor((1 + Math.random()) * 65536).toString(16).substring(1)
        }
        return z() + z() + "-" + z() + "-" + z() + "-" + z() + "-" + z() + z() + z()
    }
    return {
        connect: function(B, A, z) {
            e = B;
            g = A && A.length > 0 ? A : "webclient_" + +(new Date());
            q[A] = z;
            u()
        },
        send: function(A, z) {
            o(function() {
                c(A, z)
            })
        },
        call: function(A, C, B, z) {
            o(function() {
                n(A, C, B, z)
            })
        },
        register: function(A, z) {
            o(function() {
                a(A, z)
            })
        },
        subscribe: function(A, z) {
            o(function() {
                j(A, z)
            })
        },
        unsubscribe: function(z) {
            o(function() {
                x(z)
            })
        },
        variable: function(D, A) {
            var C = [];
            var E;

            function B(F) {
                C.forEach(function(G) {
                    G(F)
                })
            }

            function z(F) {
                if (arguments.length && F !== E) {
                    E = F;
                    B(F);
                    c(D, {
                        name: E
                    })
                }
                return E
            }
            z.subscribe = function(F) {
                C.push(F)
            };
            this.subscribe(D, function(F) {
                if (F.data.hasOwnProperty(A)) {
                    z(F.data[A])
                }
            });
            return z
        },
        isConnected: function() {
            return k()
        },
        close: function() {
            o(function() {
                p()
            })
        },
        handlers: function() {
            return q
        },
        logger: function(z) {
            y = z
        },
        error: function(z) {
            s = z
        }
    }
})();